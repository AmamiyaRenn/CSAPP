# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
    .align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1,%rdi
	call rsum_list		
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
    xorq %rax,%rax
    andq %rdi,%rdi
	je    Return       
    pushq %rbx           # 因为val会被下一个调用改变，所以要保存起来
    mrmovq (%rdi),%rbx   # long val = ls->val
    mrmovq 8(%rdi),%rdi   # ls = ls->next 
    call rsum_list
	addq %rbx,%rax       # Add to val
    popq %rbx
Return:
	ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
